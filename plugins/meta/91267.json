{"id":91267,"xmlId":"com.squaretest.Squaretest","name":"Squaretest","description":"\n<p>\n    Automatically Generate Unit Tests for Your Java Source Classes.\n</p>\n<p>\n    <b>Create a Test Class</b><br>\n    Choose <b>Squaretest | Generate Test</b> from the toolbar menu to create a test class for a Java class.\n</p>\n\n<p>\n    <b>Create Test Methods</b><br>\n    Open a test class and choose <b>Squaretest | Generate Test Methods</b> from the toolbar menu; Then, select the test methods you want to create and click OK.\n</p>\n<p>\n    <b>Features</b><br>\n</p>\n<ul>\n    <li>Auto generates Java or Groovy test code using either the JUnit4, JUnit5, TestNG, Robolectric3+ or AndroidJUnit4 test frameworks and the Mockito mocking framework.</li>\n    <li>Allows you to confirm which dependencies to mock (choose <b>Squaretest | Generate Test - Ask to Confirm Mocks</b>)</li>\n    <li>Creates test methods that invoke the source methods and compare the returned values to expected values</li>\n    <li>Generates when() and verify() statements for dependency method calls.</li>\n    <li>Creates doAnswer() statements for dependency method calls that take in Callables or Runnables.</li>\n    <li>Squaretest also creates test methods for alternate flows by stubbing dependency method calls to throw exceptions.</li>\n    <li>All output can be customized by changing the provided Apache Velocity templates.</li>\n    <li>See <a href=\"https://squaretest.com\">squaretest.com</a> for the full list of features.</li>\n</ul>\n<p>\n    <b>Support</b><br>\n    Please feel free to post feedback, questions and feature-requests to the <a href=\"https://squaretest.com#support\">support forum</a>.\n</p>\n    ","tags":["Unit testing"],"vendor":"Squaretest LLC","version":"1.5.4","notes":"\n          <i>Changes in 1.5.4:</i>\n          <ul>\n            <li>Support the Enhanced DynamoDB client in AWS SDK V2.</li>\n            <li>Create templates for JUnit4 + AssertJ and JUnit5 + AssertJ.</li>\n            <li>Add FluentList.union(...) APIs.</li>\n            <li>Improve support for projects containing modules that use different test frameworks.</li>\n            <li>Generate tests for Java servlet methods. Use the MockHttpRequest/Response classes from Spring when they're available.</li>\n            <li>Use initialization methods List.of(...) and Set.of(...) when available.</li>\n          </ul>\n          <i>Changes in 1.5.3:</i>\n          <ul>\n            <li>Make the template editor in the settings menu grow/shrink when the user changes the size of the settings menu.</li>\n            <li>Generate code to initialize list properties of DTO Beans generated by JAXB.</li>\n            <li>Use the static initialization methods: Map.of(...) and Map.ofEntries(...) to initialize maps when they are available (Java 9+).</li>\n            <li>Improve logic for determining whether a class is a DTO Bean.</li>\n          </ul>\n          <i>Changes in 1.5.2:</i>\n          <ul>\n            <li>Fix issue that causes IntelliJ IDEA to freeze when creating test classes in certain cases.</li>\n            <li>Reduce the maximum number of setters that can be called when initializing a DTO Bean recursively.</li>\n            <li>Add a quick setting to configure the maximum number of setters that can be called when initializing a DTO bean recursively.</li>\n          </ul>\n          <i>Changes in 1.5:</i>\n          <ul>\n            <li>Invoke constructors and static creator methods recursively when computing init expressions.</li>\n            <li>Initialize DTO beans recursively when their properties are beans or have init expressions that contain beans.</li>\n            <li>Initialize DTO beans within init expressions; e.g. Bean in Optional.of(Arrays.asList(Bean)).</li>\n            <li>Only generate assertEquals(...) calls when the method return type and its type parameters override Object.equals(...); also apply similar logic to primitives and arrays.</li>\n            <li>Use inline values in assertEquals(...) statements when the return type is simple; e.g. String, int, long, etc.</li>\n            <li>Improve init code generated for Futures, CompletableFutures, ListenableFutures, Observables, Flowables and Optionals.</li>\n            <li>Correctly handle dependency interactions within method reference expressions.</li>\n          </ul>\n          <i>Changes in 1.4:</i>\n          <ul>\n            <li>Generate setter calls for method arguments and dependency interaction (DI) return types that are DTO Beans; e.g. classes generated from a .xsd file.</li>\n            <li>Use mocks or spies for DI return types that implement Closeable. Also generate verify statements to ensure the source method(s) close them.</li>\n            <li>Use inline expressions instead of local variables for method arguments that are simple types; e.g. String, int, Enum, etc.</li>\n            <li>Generate simple, 1-line test methods for static methods that take in and return simple types.</li>\n            <li>Generate special code for DIs involving the AWS Java clients for Amazon S3, DynamoDB, SQS, SNS, SES and other services.</li>\n            <li>Update Java templates to include a \"throws Exception\" clause in all test methods; Squaretest removes unnecessary throws clauses after the test class is created.</li>\n            <li>Store DI return types with long initialization expressions in local variables and format them appropriately.</li>\n          </ul>\n    \n    ","dependencies":["com.intellij.modules.java"],"optionalDependencies":["org.intellij.groovy","com.intellij.velocity"],"since":"173.2099.1","size":8853921}