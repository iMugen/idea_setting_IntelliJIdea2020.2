{"id":98807,"xmlId":"JOL","name":"JOL Java Object Layout","description":"\n        \n        <p>\n        <a href=\"https://openjdk.java.net/projects/code-tools/jol/\">Java Object Layout (JOL)</a> is the tiny toolbox to analyze in memory object layout schemes in JVMs.\n        It allows you to make an estimate how much memory the object takes. This allows to make a simplest but most efficient performance improvements.\n        Just check your DTOs if they fit into 64 bytes of processor's cache line.\n        </p>\n        <p>For example, in HotSpot VM on 64x processor an empty string \"\" takes 40 bytes i.e. 24 bytes for String object itself + 16 bytes for an internal empty char array.\n        </p>\n        <p>\n        <a href=\"https://github.com/stokito/IdeaJol\">Source code on GitHub</a>\n        </p>\n    \n    ","tags":["Profiling"],"vendor":"Sergey Ponomarev","version":"1.9.0","notes":"\n      <ul>\n      <li>v1.9.0 Update JOL to v0.14 and minor changes</li>\n      <li>v1.8.0 Workaround for annoying NPE #20</li>\n      <li>v1.7.0 Support of Kotlin classes. Converted to UAST and fixed minor bugs</li>\n      <li>v1.6.1 Update JOL to v0.10 and fix of minor bugs</li>\n      <li>v1.6.0 Added an inspection to report about to big classes.</li>\n      <li>v1.5.0 show layout in table instead of raw text.</li>\n      <li>v1.3.0 first published version.</li>\n      <ul>\n    \n    </ul></ul>","dependencies":["com.intellij.modules.lang","com.intellij.modules.java"],"since":"192.0","sourceCodeUrl":"https://github.com/stokito/IdeaJol","size":150563,"url":"https://github.com/stokito/IdeaJol"}