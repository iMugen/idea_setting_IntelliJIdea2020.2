{"id":19569,"xmlId":"Tabifier","name":"Tabifier","description":"The tabifier plugin retabs Java code so that syntactic elements are aligned vertically. Extensive, configurable control over alignment is provided. [Note: the following examples are aligned correctly when viewed within IDEA's plugin manager, but are misaligned when viewed on the JetBrains plugin repository page due to the use of a non-fixed font.] \n<p> For example, I like to align variable declarations and assignment statements like this: </p>\n<pre>\n               int          v1;                  // loop variable\n               String       s2;                  // second string\npublic  static PrintWriter  p;\nprivate static boolean      debugging    = true; // initialize\nprivate static OutputStream outputstream = null;\n\noutputstream = new FileOutputStream(f, true);\np            = new DebuggingPrintWriter(outputstream, true);\n        </pre> IDEA likes to format them with single spaces separating the syntactic elements, like this: \n<pre>\nint v1; // loop variable\nString s2; // second string\npublic static PrintWriter p;\nprivate static boolean debugging = true; // initialize\nprivate static OutputStream outputstream = null;\n\noutputstream = new FileOutputStream(f, true);\np = new DebuggingPrintWriter(outputstream, true);\n        </pre> The tabifier plugin automatically reformats the text into the first version, or any variation of it you choose. \n<p> The Tabifier is able to right justify integer literals, e.g. </p>\n<pre>\npublic static final int ONE    =  1;\npublic static final int TWO    =  2;\npublic static final int TEN    = 10;\npublic static final int ELEVEN = 11;\n        </pre> It can align method declaration and method call parameters, even with multiple parameters per line: \n<pre>\npublic ExpressionListParser(TokenColumn       openParend,\n                            ColumnChoice      params,\n                            TokenColumn       closeParend,\n                            CodeStyleSettings codeStyleSettings, TabifierSettings settings,\n                            NestedParser      parser,            int              nestingLevel)\n        </pre> And its expression alignment is recursive, e.g. \n<pre>\nif ((psiExpressionList.getExpressions().length               &gt;  expressionListIndex &amp;&amp;\n     psiExpressionList.getExpressions()[expressionListIndex] == child                 ) ||\n    (sawNoParameters                                         == false               &amp;&amp;\n     expressionListIndex                                     &gt;                    0   )   )\n        </pre> It is capable of reformatting &quot;if&quot; statements as follows: \n<pre>\nif (param1 == p3 &amp;&amp;\n    j      &gt;  5     ) p3 = 7;\n....\nif      (param1 == p3) p3     = 6;\nelse if (param1 == 2 ) method1(param1, true, 3);\nelse                   param1 = 7;\n        </pre> Method calls can be reformatted to align parentheses, commas, or parameters: \n<pre>\nalign_params                    = (ColumnSetting ) find(ALIGN_PARAMS              );\nalign_semicolon                 = (ColumnSetting ) find(ALIGN_SEMICOLON           );\nalign_semicolon_with_comma      = (BooleanSetting) find(ALIGN_SEMICOLON_WITH_COMMA);\n        </pre> Typecast parentheses and types as well as many other expression components can also be aligned.","tags":["Formatting"],"vendor":"Dave Kriewall","version":"5.9.1","notes":"New release of Tabifier (5.9.1) fixes binary expression alignment problem.","since":"107.105","size":196675,"url":"https://github.com/DaveKriewall/Tabifier"}